<script type="text/hoplon">
  (page "index.html"
    (:require
      [tailrecursion.hoplon.util :as hutil]
      [tailrecursion.hoplon.storage-atom  :refer [local-storage]]))

  ;; consts
  (def init-board-value
    [0, 6, 6, 6, 6, 6, 6, 0, 6, 6, 6, 6, 6, 6])

  ;; stem cell
  (def state (->
               (cell init-board-value)
               (local-storage ::store)))

  ;; local state cell
  (def route (hutil/route-cell 100 "#/"))

  (defc= is-home? (= "#/" route))
  (defc= is-about? (= "#/about" route))

  ;; state transition functions 
  (defn random-board []
    (reset! state
            (vec (repeatedly 14 #(rand-int 10)))))

  (defn init-board []
    (reset! state init-board-value))
</script>


<html>
  <head>
    <title>Kalah</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">

    <link href="css/bootstrap.min.css" rel="stylesheet">
    <link href="css/style.css" rel="stylesheet">
  </head>
  <body>
    <div class="container">
      <div class="header">
        <ul class="nav nav-pills pull-right">
          <li do-class='{{ (cell= {:active is-home?}) }}'>
            <a href="#/">Home</a>
          </li>
          <li do-class='{{ (cell= {:active is-about?}) }}'>
            <a href="#/about">About</a>
          </li>
        </ul>
        <h3 class="text-muted">Kalah</h3>
      </div>

      <div class="col-md-12" do-class='{{ (cell= {:hidden (not is-home?)}) }}'>
        <table class="table table-bordered">
          <tbody>
            <tr>
              <td class="player1" rowspan="2">
                <text>~(get state 0)</text>
              </td>
              <td class="player1"><text>~(get state 1)</text></td>
              <td class="player1"><text>~(get state 2)</text></td>
              <td class="player1"><text>~(get state 3)</text></td>
              <td class="player1"><text>~(get state 4)</text></td>
              <td class="player1"><text>~(get state 5)</text></td>
              <td class="player1"><text>~(get state 6)</text></td>
              <td class="player2" rowspan="2">
                <text>~(get state 7)</text>
              </td>
            </tr>
            <tr>
              <loop-tpl bindings="{{ [i (range 8 14) ] }}">
                <td class="player2"><text>~(get state i)</text></td>
              </loop-tpl>
            </tr>
          </tbody>
          <button on-click="{{ init-board }}">init</button>
          <button on-click="{{ random-board }}">random</button>
        </table>
      </div>

      <div class="col-md-12" do-class='{{ (cell= {:hidden (not is-about?)}) }}'>
        <h4>About</h4>
        <p>
          FIX IT<br>
          About Kalah I found out when I was 14 from magazine. And for a week with help from my grandpa I had my own game (INSERT PHOTO). I really enjoed simpicity of this game. I know there is so many kalah online, but this particular I just create for learning framework Hoplon, which I really like by design.
        </p>
      </div>

    </div> <!-- /container -->

  </body>
</html>
